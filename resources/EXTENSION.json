{
	"metadata": {
		"schemaVersion": "v1"
	},
	"resources": {
		"EXTENSION": [
			{
				"model": {
					"content": "import re\nimport json\n\ndef clean_text(value):\n    \"\"\"Cleans and trims text values.\"\"\"\n    return value.strip() if isinstance(value, str) else \"\"\n\ndef extract_value_and_unit(value):\n    \"\"\"\n    Extracts a numeric value and an optional unit from a string,\n    handling both French and English number formats.\n    \n    Examples:\n    - '29,05 $' becomes (29.05, '$')\n    - '29.05 $' becomes (29.05, '$')\n    - '1,234.56 $' becomes (1234.56, '$')\n    - '1.234,56 $' becomes (1234.56, '$')\n    \"\"\"\n    if value:\n        val = value.strip()\n        # Both comma and period exist.\n        if ',' in val and '.' in val:\n            # Determine which separator appears last: likely the decimal.\n            if val.rfind(',') > val.rfind('.'):\n                # French style: period as thousand separator, comma as decimal.\n                val = val.replace('.', '')\n                val = val.replace(',', '.')\n            else:\n                # English style: comma as thousand separator.\n                val = val.replace(',', '')\n        elif ',' in val and '.' not in val:\n            # Only comma exists: assume comma is the decimal separator.\n            val = val.replace(',', '.')\n        # Regex captures numeric part and optional unit.\n        match = re.search(r\"([\\d\\.]+)\\s*([^0-9\\s]*)\", val)\n        if match:\n            num_str, unit = match.groups()\n            try:\n                number = float(num_str)\n            except Exception:\n                number = None\n            return number, unit\n    return None, \"\"\n\ndef extract_number(value):\n    \"\"\"Extracts only the numeric value from a string.\"\"\"\n    number, _ = extract_value_and_unit(value)\n    return number\n\ndef convert_rating_to_stars(rating):\n    \"\"\"Converts a percentage rating (0â€“100) to a 5-star system.\n    \n    Defaults to 0 if rating is missing or invalid.\n    \"\"\"\n    if rating is None or rating <= 0 or rating > 100:\n        return 0\n    return round((rating / 100) * 5, 1)\n\ndef process_aromas(aromas_text):\n    \"\"\"\n    Splits the aromas string by comma, trims each element,\n    and joins them back using ';' as a delimiter.\n    \"\"\"\n    if not aromas_text:\n        return \"\"\n    aromas_list = [item.strip() for item in aromas_text.split(\",\") if item.strip()]\n    return \";\".join(aromas_list)\n\ndef process_availability(product):\n    \"\"\"\n    Builds a semicolon-delimited list of availability statuses\n    based on four boolean fields:\n      - product_is_online\n      - product_is_instore\n      - product_is_lottery\n      - product_is_outofstock\n    \"\"\"\n    availability_list = []\n    \n    # Convert strings like \"true\"/\"false\" to lowercase for consistency\n    is_online = product.get(\"product_is_online\", \"\").lower() == \"true\"\n    is_instore = product.get(\"product_is_instore\", \"\").lower() == \"true\"\n    is_lottery = product.get(\"product_is_lottery\", \"\").lower() == \"true\"\n    is_outofstock = product.get(\"product_is_outofstock\", \"\").lower() == \"true\"\n    \n    if is_online:\n        availability_list.append(\"Online\")\n    if is_instore:\n        availability_list.append(\"In store\")\n    if is_lottery:\n        availability_list.append(\"In a lottery\")\n    if is_outofstock:\n        availability_list.append(\"Out of stock\")\n    \n    # Return a single string with a semicolon delimiter for multi-value indexing\n    return \";\".join(availability_list)\n\ndef preprocess_product_data(product):\n    \"\"\"Cleans and processes product metadata.\"\"\"\n    # Extract numeric values and units where applicable.\n    price, price_unit = extract_value_and_unit(product.get(\"product_price\"))\n    alcohol_degree, alcohol_unit = extract_value_and_unit(product.get(\"product_details_alcohol_degree\"))\n    sugar_value, sugar_unit = extract_value_and_unit(product.get(\"product_details_sugar_content\"))\n    \n    # Default rating and availability to 0 if missing.\n    rating = extract_number(product.get(\"product_rating\")) or 0\n    online_avail = extract_number(product.get(\"product_online_availability\")) or 0\n    \n    cleaned_product = {\n        # Basic product info.\n        \"product_name\": clean_text(product.get(\"product_name\")),\n        \"product_price\": price,\n        \"product_price_unit\": price_unit,\n        \"product_online_availability\": online_avail,\n        \"product_image_url\": clean_text(product.get(\"product_image_url\")),\n        \n        # Rating and stars.\n        \"product_rating\": rating,\n        \"product_rating_stars\": convert_rating_to_stars(rating),\n        \n        # Product details.\n        \"product_details_country\": clean_text(product.get(\"product_details_country\")),\n        \"product_details_region\": clean_text(product.get(\"product_details_region\")),\n        \"product_details_regulated_designation\": clean_text(product.get(\"product_details_regulated_designation\")),\n        \"product_details_grape_variety\": clean_text(product.get(\"product_details_grape_variety\")),\n        \"product_details_sugar_content\": sugar_value,\n        \"product_details_sugar_content_unit\": sugar_unit,\n        \"product_details_color\": clean_text(product.get(\"product_details_color\")),\n        \"product_details_size\": clean_text(product.get(\"product_details_size\")),\n        \"product_details_producer\": clean_text(product.get(\"product_details_producer\")),\n        \"product_details_promoting_agent\": clean_text(product.get(\"product_details_promoting_agent\")),\n        \"product_details_alcohol_degree\": alcohol_degree,\n        \"product_details_alcohol_degree_unit\": alcohol_unit,\n        \"product_details_saq_code\": clean_text(product.get(\"product_details_saq_code\")),\n        \"product_details_upc_code\": clean_text(product.get(\"product_details_upc_code\")),\n        \n        # URLs.\n        \"product_details_promoting_agent_url\": clean_text(product.get(\"product_details_promoting_agent_url\")),\n        \"product_details_producer_url\": clean_text(product.get(\"product_details_producer_url\")),\n        \n        # Tasting: Standardize aromas.\n        \"product_tasting_aromas\": process_aromas(clean_text(product.get(\"product_tasting_aromas\"))),\n        \n        # Availability multi-facet (semicolon-delimited).\n        \"product_availability_facet\": process_availability(product)\n    }\n    \n    return cleaned_product\n\ntry:\n    # Helper function to retrieve a single value from metadata.\n    def get_prop(key):\n        values = document.get_meta_data_value(key, \"crawler\")\n        return values[0] if values and len(values) > 0 else \"\"\n    \n    # Build the product dictionary by fetching each property individually.\n    product = {\n        \"product_name\": get_prop(\"product_name\"),\n        \"product_price\": get_prop(\"product_price\"),\n        \"product_image_url\": get_prop(\"product_image_url\"),\n        \"product_rating\": get_prop(\"product_rating\"),\n        \"product_online_availability\": get_prop(\"product_online_availability\"),\n        \"product_details_alcohol_degree\": get_prop(\"product_details_alcohol_degree\"),\n        \"product_details_sugar_content\": get_prop(\"product_details_sugar_content\"),\n        \"product_details_size\": get_prop(\"product_details_size\"),\n        \"product_details_country\": get_prop(\"product_details_country\"),\n        \"product_details_region\": get_prop(\"product_details_region\"),\n        \"product_details_regulated_designation\": get_prop(\"product_details_regulated_designation\"),\n        \"product_details_grape_variety\": get_prop(\"product_details_grape_variety\"),\n        \"product_details_color\": get_prop(\"product_details_color\"),\n        \"product_details_producer\": get_prop(\"product_details_producer\"),\n        \"product_details_promoting_agent\": get_prop(\"product_details_promoting_agent\"),\n        \"product_details_saq_code\": get_prop(\"product_details_saq_code\"),\n        \"product_details_upc_code\": get_prop(\"product_details_upc_code\"),\n        \"product_details_promoting_agent_url\": get_prop(\"product_details_promoting_agent_url\"),\n        \"product_details_producer_url\": get_prop(\"product_details_producer_url\"),\n        \"product_tasting_aromas\": get_prop(\"product_tasting_aromas\"),       \n        \"product_is_online\": get_prop(\"product_is_online\"),\n        \"product_is_instore\": get_prop(\"product_is_instore\"),\n        \"product_is_lottery\": get_prop(\"product_is_lottery\"),\n        \"product_is_outofstock\": get_prop(\"product_is_outofstock\")\n    }\n    \n    # Process and clean the product data.\n    cleaned_product = preprocess_product_data(product)\n    \n    # Add the cleaned product metadata so it becomes indexed.\n    document.add_meta_data(cleaned_product)\n    \n    # Log the cleaned product data for debugging.\n    log(\"Cleaned product data: \" + json.dumps(cleaned_product, indent=4), \"Notification\")\n    \nexcept Exception as e:\n    log(\"Error in processing product data: \" + str(e), \"Error\")\n    document.reject()\n",
					"description": "s",
					"language": "PYTHON3",
					"name": "saq_pipeline",
					"requiredDataStreams": [],
					"useVault": false
				},
				"parents": {},
				"resourceName": "saq_pipeline_UzMGmH"
			}
		]
	}
}
